#include <iostream>
using namespace std;

template <typename T>
class Queue {
private:
    struct Node {
        T data;
        Node* next;
        Node(T value) : data(value), next(nullptr) {}
    };

    Node* front;
    Node* rear;

public:
    Queue() : front(nullptr), rear(nullptr) {}

    void enqueue(T value) {
        Node* newNode = new Node(value);
        if (rear == nullptr) {
            front = rear = newNode;
        } else {
            rear->next = newNode;
            rear = newNode;
        }
    }

    T dequeue() {
        if (isEmpty()) {
            cout << "Черга порожня!" << endl;
            return T();
        }
        Node* temp = front;
        T value = temp->data;
        front = front->next;
        if (front == nullptr) rear = nullptr;
        delete temp;
        return value;
    }

    bool isEmpty() const {
        return front == nullptr;
    }

    void display() const {
        Node* temp = front;
        cout << "Елементи в черзі: ";
        while (temp) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    ~Queue() {
        while (!isEmpty()) {
            dequeue();
        }
    }
};

int main() {
    Queue<int> q;
    int n, value;

    cout << "Введіть кількість елементів, які потрібно додати до черги: ";
    cin >> n;

    for (int i = 0; i < n; ++i) {
        cout << "Введіть елемент #" << i + 1 << ": ";
        cin >> value;
        q.enqueue(value);
    }

    cout << "\nВміст черги після додавання елементів:\n";
    q.display();

    cout << "\nЗнімаємо два елементи з черги..." << endl;
    if (!q.isEmpty()) cout << "Знято: " << q.dequeue() << endl;
    if (!q.isEmpty()) cout << "Знято: " << q.dequeue() << endl;

    cout << "\nВміст черги після зняття:\n";
    q.display();

    return 0;
}
